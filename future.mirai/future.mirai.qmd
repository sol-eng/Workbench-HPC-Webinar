---
title: "future.mirai"
author: "Michael Mayer"
format: html
editor: visual
execute:
  echo: true
  output: true
---

## future.mirai vs. future.cluster

[future.mirai](https://future.mirai.futureverse.org/) is a new backend for the [futureverse](https://www.futureverse.org/) framework. It uses [mirai](https://shikokuchuo.net/mirai/) as a backend. Mirai is using [nanonext](https://shikokuchuo.net/nanonext/), the R frontend for [NNG](https://nng.nanomsg.org/), a successor for the [zeromq](https://zeromq.org/) framework (the latter being used in the R package [clustermq](https://mschubert.github.io/clustermq/index.html)).

## Code

### Initial setup

First we load all needed packages

```{r}
#| output: false
library(future.mirai)
library(mirai)
library(furrr)
library(purrr)
library(palmerpenguins)
library(dplyr)
library(tibble)
library(ggplot2)
```

### Various function definitions

First we define our compute task function

```{r}
compute_task <- function(n) {
  library(palmerpenguins)
  library(dplyr)
  peng <- penguins %>% 
    mutate(
      species = as.factor(species),
      sex = as.factor(sex)
    ) %>% 
    sample_n(333)
  res<-glm(body_mass_g ~ species + sex, data = peng)
}
```

This task is then run `samples` times in a `future_map` call



Now we need to setup the mirai cluster daemons, where we deal with the SLURM details in the `remote_config()` function of the `mirai::daemons()` call. 

As previously with clustermq, we use 2 cores which will equal two SLURM jobs.

```{r}
  cores <- 2
  daemons(
    cores,
    url = host_url(ws = TRUE, tls = TRUE),
    remote = remote_config(
      command = "sbatch",
      args = c("--mem 1024", "-p interactive", "-n 1", "--wrap", "."),
      rscript = file.path(R.home("bin"), "Rscript"),
      quote = TRUE
    ),
    dispatcher = TRUE
  )
```
  
You can check via `mirai::daemons()` on the status of your workers. 
  
We now can use `mirai_cluster` to "plan" the `future` environment: 

````{r}
  plan(mirai_cluster)
```

Finally we can run our code in a `future_map()` call.

```{r}
samples <- 1000
set.seed(1234)
res <- 1:samples |>
                future_map(compute_task, .options = furrr_options(
                  seed = TRUE,
                  packages = c("palmerpenguins", "dplyr")
                ))
```

Note in the above the mention of `furrr_options` `seed=TRUE` to ensure reproducibilty (random number generation consistency) and the attachment of the two needed packages for the `compute_task` function.

Before continuing with the post precessing of our data, let's shutdown the worker nodes 

```{r}
daemons(0)
```

Let's create a prediction on the body mass for male Chinstrap penguins. 
```{r}
# create new data
new_dat <- tibble::tribble(~ species, ~ sex, "Chinstrap", "male")

# create prediction for each of the models
preds <- tibble(mass = map_dbl(res, predict, new_dat))
```


We finally plot the results. 
```{r}
# plot the result
library(ggplot2)
ggplot(preds, aes(x = mass)) +
  geom_histogram(bins = samples / 50) +
  ggtitle("Ensemble model prediction of mass of male Chinstrap penguins")
```
